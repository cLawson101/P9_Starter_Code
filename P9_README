Due date:
    test: 4/13/2022 @ 11:59pm
    code: 4/15/2022 @ 11:59pm

Assignment:
~~~~~~~~~~~

- Go to user mode
- Implement 2 system calls
- Donate a test case (<csid>.dir, <csid>.ok)

Virtual Address Space:
~~~~~~~~~~~~~~~~~~~~~~

0x00000000 - 0x00001000       (invalid)
0x00001000 - 0x80000000       (shared kernel RWX)
0x80000000 - 0xFFFFFFFF+1     (per-thread user RWX)
                              (except for IOPIC and LAPIC)

User code should not be able to access anything outside the user range. Any
attempt to do so should lead to kernel panic.

Details:
~~~~~~~~

(1) kernelMain mounts the ext2 file system in drive #1

(2) it looks for a file named /sbin/init

(3) it loads it in user memory (0x80000000 - 0xf0000000) according to what
    the ELF file asks for.

    It should reject any non-ELF files or an ELF file that tries to load
    a program outside the user range

(4) it switches to user mode and starts running the user process at the
    program entry point

(5) the kernel should protect all its resources from the user program

(6) Two system calls are defined:

     - exit(int status)     // exits the current process and shuts down
                            // the system (we will improve on this later)

     - n = write(fd, buffer, len)
                            // writes up to "len" bytes to a file and returns
                            // the number of bytes written.
                            // we will ignore the "fd" this week and just
                            // print the bytes as characters on the console

Files:
~~~~~~

- kernel/          contains the kernel files

- <test>.dir/      the contents of the root disk

- <test>.dir/sbin
    init.c         ... init source
    libc.c/libc.h  ... minimal libc implementation
    sys.S/sys.h    ... user-side system calls
    init           ... the ELF init file packaged in t0.img

For Makefile help:
~~~~~~~~~~~~~~~~~~

    make help

To run test:
~~~~~~~~~~~~

    make -s clean test

To run one test:
~~~~~~~~~~~~~~~~

    make -s t0.test

To make the output more noisy:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    make clean test

To run by hand
~~~~~~~~~~~~~~

    ./run_qemu t0

To attach with gdb
~~~~~~~~~~~~~~~~~~

    ./debug_qemu t0


